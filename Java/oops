#####OBJECT ORIENTED PROGRAMMING SYSTEM#######
---->DEFNITION
     *Java Object-Oriented Programming (OOPs) is a fundamental concept in Java that every developer must understand.
      It allows developers to structure code using classes and objects, making it more modular, reusable, and scalable.
     * It is a programming approach that organizes code into objects and classes and makes it more structured and easy to manage. 
----->Concepts
      *Class
      *object
      *Abstraction
      *Encapsulation
      *Polymorphism
      *Inheritance
      *Constructur
      *Interface
      *Access Modifier
------>Class<------
WHAT?
  *A class in Java is like a blueprint or a design plan.
It is not real, but it defines:
>What kind of data an object will have (variables)
>What kind of actions it can perform (methods)
>It does not use real memory until you create an object from it.
WHY?
 >To avoid repeating the same code for multiple things
 >To keep related data and behavior together
 >To make code more organized, reusable, and easy to manage

HOW?
  // This is a class named Car
class Car {
    // Data (called fields or variables)
    String color;
    int speed;

    // Behavior (called methods)
    void drive() {
        System.out.println("The car is driving.");
    }

    void stop() {
        System.out.println("The car has stopped.");
    }
}
-->Types
* 1. Concrete Class(A class that has complete implementation (not abstract or special).)
EG:
class Car {
    void drive() {
        System.out.println("Driving...");
    }
}

*Abstract Class(A class that cannot be instantiated, may contain abstract methods (no body), and concrete methods (with body).)
abstract class Animal {
    abstract void makeSound();  // abstract method

    void breathe() {           // concrete method
        System.out.println("Breathing...");
    }
}

* Final Class(A class declared with the keyword final. You cannot extend (inherit) from it.)
EG:final class Bank {
    void process() {
        System.out.println("Processing...");
    }
}
*Static Nested Class(A class defined as static inside another class.)
class Outer {
    static class StaticNested {
        void show() {
            System.out.println("Static Nested Class");
        }
    }
}
* Inner (Non-static Nested) Class(A class defined inside another class, but not static.)
EG:
class Outer {
    class Inner {
        void display() {
            System.out.println("Inner Class");
        }
    }
}

*Anonymous Class(A class without a name, used for one-time use, often when implementing interfaces or abstract classes on the fly.)
Runnable r = new Runnable() {
    public void run() {
        System.out.println("Running...");
    }
};


